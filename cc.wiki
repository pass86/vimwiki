= 糟糕的代码 =
* 我们都曾经说过有朝一日再回头清理, 当然, 在那些日子里, 我们都没有听过勒布朗(LeBlanc)法则: 稍后等于永不(Later equal never)

= 华丽的新设计 =
* 新团队的老成员早已不知去向, 而现有成员则要求重新设计一套新系统, 因为这套系统太烂了

= 谜题 =
* 赶上期限的唯一方法, 做得快的唯一方法, 就是始终尽可能保持代码整洁

= 整洁代码的艺术 =
* 编写整洁代码的程序员就像是艺术家, 他能用一系列变换把一块白板变作由优雅代码构成的系统

= 什么是整洁代码 =
    * 我喜欢优雅和高效地代码
    * 整洁的代码简单直接
    * 整洁的代码应该可由作者之外的开发者阅读和增补
    * 整洁的代码总是看起来像是某位特别在意它的人写的, 几乎没有改进的余地, 如果你企图改进它, 总会回到原点
    * 减少重复代码, 提高表达力, 提早构建简单抽象
    * 如果每个例程都让你深合己意, 那就是整洁的代码

= 我们是作者 =
* 要想干得快, 要想早点做完, 要想轻松写代码, 先让代码易读吧

= 童子军军规 =
* 让营地比你来时更干净

= 使用读得出来的名称 =
* 如果名称读不出来, 讨论的时候就会像个傻鸟

= 参数对象 =
* 若果函数看来需要两个、三个或三个以上参数, 就说明其中一些参数应该封装为类了

= 分隔指令与询问 =
* 函数要么做什么事, 要么回答什么事, 但二者不可得兼

= 别重复自己 =
* 重复可能是软件中一切邪恶的根源, 许多原则与实践规则都是为了控制与消除重复而创建

= 如何写出这样的函数 =
* 我并不从一开始就按照规则写函数, 我想没人做得到

= 小结 =
* 大师级程序员把系统当做故事来讲, 而不是当作程序来写

= 注释 =
* 注释的恰当用法是弥补我们在用代码表达意图时遭遇失败
* 注释存在的时间越久, 就离其所描述的代码越远, 越来越变得错误

= 用代码来阐述 =
* 只需要创建一个描述与注释所言同一事物的函数即可

= TODO注释 =
* TODO是一种程序员认为应该做, 但由于某些原因目前还没做的工作
* 无论TODO的目的如何, 它都不是在系统中留下糟糕代码的借口

= 喃喃自语 =
* 如果你决定写注释, 就要花必要的时间确保写出最好的注释

= 多余的注释 =
* 它就像个自来熟的二手车贩子, 满口保证你不用打开发动机盖查验

= 向报纸学习 =
* 源文件最顶部应该给出高层次概念和算法, 细节应该往下渐次展开, 直至找到源文件中最底层的函数和细节

= 垂直距离 =
* 关系密切的概念应该互相靠近

= 垂直距离 =
* 被调用的函数应该放在执行调用的函数下面

= 横向格式 =
* 我的个人上限是120个字符

= 数据抽象 =
* 隐藏实现并非只是在变量之间放上一个函数层那么简单, 隐藏实现关乎抽象

= 浏览和学习边界 =
* 不要在生产代码中试验新东西, 而是编写测试来遍览和理解第三方代码, 学习性测试(learning tests)
